name: Build, Test and Publish

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
        - master
  workflow_dispatch:

jobs:

  check-version-txt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Tag with the release version
      run: |
        git tag $(cat version.txt)

  lint-format-and-static-code-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.11.9
    - name: Install Pre Commmit
      run: |
        /bin/bash ./run.sh install_pre_commit
    - name: Lint, Format, and other static code quality checks
      run: |
        /bin/bash ./run.sh lint:ci

  build-wheel-and-sdist:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.11.9
    - name: Install Build CLI
      run: |
        pip install build
    - name: Build Python Package
      run: |
        /bin/bash ./run.sh build
    - name: Upload wheel and sdist
      uses: actions/upload-artifact@v4
      with:
        name: wheel-and-sdist
        path: ./dist/*

  publish:
    needs:
      - build-wheel-and-sdist
      - lint-format-and-static-code-checks
      - check-version-txt
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11.9
      uses: actions/setup-python@v3
      with:
        python-version: 3.11.9
    - name: Download wheel and sdist
      uses: actions/download-artifact@v4
      with:
        name: wheel-and-sdist
        path: ./dist/
    - name: Install Twine
      run: |
        pip install twine
    - name: Publish to TestPyPI
      run: |
        /bin/bash ./run.sh publish:test
      env:
        TEST_PYPI_TOKEN: ${{secrets.TEST_PYPI_TOKEN}}
    - name: Publish to ProdPyPI
      run: |
        /bin/bash ./run.sh publish:prod
      env:
        PROD_PYPI_TOKEN: ${{secrets.PROD_PYPI_TOKEN}}




  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
      - name: Dump secrets context
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: echo "$SECRETS_CONTEXT"
      - name: Dump Vars context
        env:
          VARS_CONTEXT: ${{ toJson(vars) }}
        run: echo "$VARS_CONTEXT"
